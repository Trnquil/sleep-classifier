from source.preprocessing.clustering.clustering_service import ClusteringServiceimport numpy as npclass ClusteringFinalFeatureService(object):        @staticmethod    def build(subject_id, session_id):        cluster_collection = ClusteringService.load(subject_id, session_id)        percentage_features = ClusteringFinalFeatureService.build_percentage_features(cluster_collection)                return percentage_features        @staticmethod    def build_percentage_features(cluster_collection):                collection_len = cluster_collection.shape[0]        ps_4 = np.sum(cluster_collection < 4)/collection_len        ps_3 = np.sum(cluster_collection < 3)/collection_len        ps_2 = np.sum(cluster_collection < 2)/collection_len        ps_1 = np.sum(cluster_collection < 1)/collection_len                features_dictionary = {'ps_1': [ps_1], 'ps_2': [ps_2], 'ps_3': [ps_3], 'ps_4': [ps_4]}                return features_dictionary