from source.data_services.data_loader import DataLoaderfrom source.analysis.setup.feature_type import FeatureTypefrom source.data_services.dataset import DataSetfrom source.data_services.data_frame_loader import DataFrameLoaderfrom source.runner_parameters import RunnerParametersimport numpy as npimport pandas as pdclass ClusterNightlyFeatureService(object):        @staticmethod    def build_feature_dict(subject_id, session_id, feature_type, dataset):                clusters = DataFrameLoader.load_feature_dataframe(subject_id, session_id, [feature_type], dataset)        clusters = clusters.drop(columns=['epoch_timestamp', 'subject_id', 'session_id']).to_numpy()                features_dict = ClusterNightlyFeatureService.build_percentage_features(clusters)        merged_dict = features_dict                                return merged_dict            @staticmethod    def build_percentage_features(cluster_feature):                cluster_feature_len = cluster_feature.shape[0]                features_dictionary = {}        for cluster in range(RunnerParameters.NUMBER_OF_CLUSTERS):            features_dictionary['c_' + str(cluster)] = np.sum(cluster_feature == cluster)/cluster_feature_len                    return features_dictionary        